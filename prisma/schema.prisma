generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

//
// datasource db {
//  provider = "sqlite"
//  url      = "file:./dev.db" //  env("DATABASE_URL") // 
// }

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Table {
  id    Int     @id @default(autoincrement())
  name  String
  order Order[]
  User  User[]
}

model Order {
  id         Int          @id @default(autoincrement())
  table      Table        @relation(fields: [tableId], references: [id])
  tableId    Int
  time       DateTime     @default(now())
  status     Int          @default(1)
  user       User         @relation(fields: [userId], references: [id])
  userId     String
  MenuOrder  MenuOrder[]
  DrinkOrder DrinkOrder[]
  paid       Boolean      @default(false)
}

model Menu {
  id    Int         @id @default(autoincrement())
  name  String
  price Float
  order MenuOrder[]
}

model Drink {
  id    Int          @id @default(autoincrement())
  name  String
  price Float
  order DrinkOrder[]
}

model MenuOrder {
  menuId  Int
  orderId Int
  amount  Int
  menu    Menu  @relation(fields: [menuId], references: [id], onDelete: Cascade)
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@id([menuId, orderId])
}

model DrinkOrder {
  drinkId Int
  orderId Int
  amount  Int
  drink   Drink @relation(fields: [drinkId], references: [id], onDelete: Cascade)
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@id([drinkId, orderId])
}

model User {
  id           String    @id @unique
  username     String    @unique
  isAdmin      Boolean   @default(false)
  order        Order[]
  key          Key[]
  auth_session Session[]
  table        Table?    @relation(fields: [tableId], references: [id])
  tableId      Int?
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}
