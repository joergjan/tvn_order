generator client {
  provider             = "prisma-client-js"
  recursive_type_depth = 5
}

datasource db {
  provider = "sqlite"
  url      = "file:/home/admin/Documents/tvn/tvn_order/db/dev.db"
}

//datasource db {
// provider = "postgresql"
// url = env("POSTGRES_PRISMA_URL") // uses connection pooling
// directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
//}

model Table {
  id    Int     @id @default(autoincrement())
  name  String
  order Order[]
  User  User[]
}

model Order {
  id            Int            @id @default(autoincrement())
  table         Table          @relation(fields: [tableId], references: [id])
  tableId       Int
  time          DateTime       @default(now())
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  name          String?
  printed       Boolean        @default(false)
  createdOn     DateTime       @default(now())
  updatedOn     DateTime?
  orderedDrinks OrderedDrinks?
  orderedMenus  OrderedMenus?
}

model Menu {
  id    Int         @id @default(autoincrement())
  name  String
  price Float
  order MenuOrder[]
}

model Drink {
  id    Int          @id @default(autoincrement())
  name  String
  price Float
  order DrinkOrder[]
}

model OrderedDrinks {
  id         Int          @id @default(autoincrement())
  drinkOrder DrinkOrder[]
  status     Int          @default(1)
  paid       Boolean      @default(false)
  Order      Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    Int          @unique
}

model OrderedMenus {
  id        Int         @id @default(autoincrement())
  menuOrder MenuOrder[]
  status    Int         @default(1)
  paid      Boolean     @default(false)
  Order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int         @unique
}

model MenuOrder {
  menuId         Int
  orderedMenusId Int
  amount         Int
  menu           Menu         @relation(fields: [menuId], references: [id], onDelete: Cascade)
  orderedMenu    OrderedMenus @relation(fields: [orderedMenusId], references: [id], onDelete: Cascade)

  @@id([menuId, orderedMenusId])
}

model DrinkOrder {
  drinkId         Int
  orderedDrinksId Int
  amount          Int
  drink           Drink         @relation(fields: [drinkId], references: [id], onDelete: Cascade)
  orderedDrinks   OrderedDrinks @relation(fields: [orderedDrinksId], references: [id], onDelete: Cascade)

  @@id([drinkId, orderedDrinksId])
}

model User {
  id           String    @id @unique
  username     String    @unique
  isAdmin      Boolean   @default(false)
  order        Order[]
  key          Key[]
  auth_session Session[]
  table        Table?    @relation(fields: [tableId], references: [id])
  tableId      Int?
}

model Error {
  id        Int      @id @default(autoincrement())
  message   String
  createdAt DateTime @default(now())
  solved    Boolean  @default(false)
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}
