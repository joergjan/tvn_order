{
  "version": 3,
  "sources": ["../../@lucia-auth/adapter-prisma/dist/prisma.js"],
  "sourcesContent": ["export const prismaAdapter = (client, modelNames) => {\n    const getModels = () => {\n        if (!modelNames) {\n            return {\n                User: client[\"user\"],\n                Session: client[\"session\"] ?? null,\n                Key: client[\"key\"]\n            };\n        }\n        return {\n            User: client[modelNames.user],\n            Session: modelNames.session\n                ? client[modelNames.session]\n                : null,\n            Key: client[modelNames.key]\n        };\n    };\n    const { User, Session, Key } = getModels();\n    return (LuciaError) => {\n        return {\n            getUser: async (userId) => {\n                return await User.findUnique({\n                    where: {\n                        id: userId\n                    }\n                });\n            },\n            setUser: async (user, key) => {\n                if (!key) {\n                    await User.create({\n                        data: user\n                    });\n                    return;\n                }\n                try {\n                    await client.$transaction([\n                        User.create({\n                            data: user\n                        }),\n                        Key.create({\n                            data: key\n                        })\n                    ]);\n                }\n                catch (e) {\n                    const error = e;\n                    if (error.code === \"P2002\" && error.message?.includes(\"`id`\"))\n                        throw new LuciaError(\"AUTH_DUPLICATE_KEY_ID\");\n                    throw error;\n                }\n            },\n            deleteUser: async (userId) => {\n                try {\n                    await User.delete({\n                        where: {\n                            id: userId\n                        }\n                    });\n                }\n                catch (e) {\n                    const error = e;\n                    if (error.code === \"P2025\") {\n                        // user does not exist\n                        return;\n                    }\n                    throw e;\n                }\n            },\n            updateUser: async (userId, partialUser) => {\n                await User.update({\n                    data: partialUser,\n                    where: {\n                        id: userId\n                    }\n                });\n            },\n            getSession: async (sessionId) => {\n                if (!Session) {\n                    throw new Error(\"Session table not defined\");\n                }\n                const result = await Session.findUnique({\n                    where: {\n                        id: sessionId\n                    }\n                });\n                if (!result)\n                    return null;\n                return transformPrismaSession(result);\n            },\n            getSessionsByUserId: async (userId) => {\n                if (!Session) {\n                    throw new Error(\"Session table not defined\");\n                }\n                const sessions = await Session.findMany({\n                    where: {\n                        user_id: userId\n                    }\n                });\n                return sessions.map((session) => transformPrismaSession(session));\n            },\n            setSession: async (session) => {\n                if (!Session) {\n                    throw new Error(\"Session table not defined\");\n                }\n                try {\n                    await Session.create({\n                        data: session\n                    });\n                }\n                catch (e) {\n                    const error = e;\n                    if (error.code === \"P2003\") {\n                        throw new LuciaError(\"AUTH_INVALID_USER_ID\");\n                    }\n                    throw error;\n                }\n            },\n            deleteSession: async (sessionId) => {\n                if (!Session) {\n                    throw new Error(\"Session table not defined\");\n                }\n                try {\n                    await Session.delete({\n                        where: {\n                            id: sessionId\n                        }\n                    });\n                }\n                catch (e) {\n                    const error = e;\n                    if (error.code === \"P2025\") {\n                        // session does not exist\n                        return;\n                    }\n                    throw e;\n                }\n            },\n            deleteSessionsByUserId: async (userId) => {\n                if (!Session) {\n                    throw new Error(\"Session table not defined\");\n                }\n                await Session.deleteMany({\n                    where: {\n                        user_id: userId\n                    }\n                });\n            },\n            updateSession: async (userId, partialSession) => {\n                if (!Session) {\n                    throw new Error(\"Session table not defined\");\n                }\n                await Session.update({\n                    data: partialSession,\n                    where: {\n                        id: userId\n                    }\n                });\n            },\n            getKey: async (keyId) => {\n                return await Key.findUnique({\n                    where: {\n                        id: keyId\n                    }\n                });\n            },\n            getKeysByUserId: async (userId) => {\n                return await Key.findMany({\n                    where: {\n                        user_id: userId\n                    }\n                });\n            },\n            setKey: async (key) => {\n                try {\n                    await Key.create({\n                        data: key\n                    });\n                }\n                catch (e) {\n                    const error = e;\n                    if (error.code === \"P2003\") {\n                        throw new LuciaError(\"AUTH_INVALID_USER_ID\");\n                    }\n                    if (error.code === \"P2002\" && error.message?.includes(\"`id`\")) {\n                        throw new LuciaError(\"AUTH_DUPLICATE_KEY_ID\");\n                    }\n                    throw error;\n                }\n            },\n            deleteKey: async (keyId) => {\n                try {\n                    await Key.delete({\n                        where: {\n                            id: keyId\n                        }\n                    });\n                }\n                catch (e) {\n                    const error = e;\n                    if (error.code === \"P2025\") {\n                        // key does not exist\n                        return;\n                    }\n                    throw e;\n                }\n            },\n            deleteKeysByUserId: async (userId) => {\n                await Key.deleteMany({\n                    where: {\n                        user_id: userId\n                    }\n                });\n            },\n            updateKey: async (keyId, partialKey) => {\n                await Key.update({\n                    data: partialKey,\n                    where: {\n                        id: keyId\n                    }\n                });\n            }\n        };\n    };\n};\nexport const transformPrismaSession = (sessionData) => {\n    const { active_expires, idle_expires: idleExpires, ...data } = sessionData;\n    return {\n        ...data,\n        active_expires: Number(active_expires),\n        idle_expires: Number(idleExpires)\n    };\n};\n"],
  "mappings": "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",
  "names": []
}
