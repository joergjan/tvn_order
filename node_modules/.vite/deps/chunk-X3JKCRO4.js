// node_modules/lucia/dist/utils/request.js
var createHeadersFromObject = (headersObject) => {
  const headers = new Headers();
  for (const [key, value] of Object.entries(headersObject)) {
    if (value === null || value === void 0)
      continue;
    if (typeof value === "string") {
      headers.set(key, value);
    } else {
      for (const item of value) {
        headers.append(key, item);
      }
    }
  }
  return headers;
};

// node_modules/lucia/dist/middleware/index.js
var node = () => {
  return ({ args }) => {
    const [incomingMessage, outgoingMessage] = args;
    const requestContext = {
      request: {
        method: incomingMessage.method ?? "",
        headers: createHeadersFromObject(incomingMessage.headers)
      },
      setCookie: (cookie) => {
        let parsedSetCookieHeaderValues = [];
        const setCookieHeaderValue = outgoingMessage.getHeader("Set-Cookie");
        if (typeof setCookieHeaderValue === "string") {
          parsedSetCookieHeaderValues = [setCookieHeaderValue];
        } else if (Array.isArray(setCookieHeaderValue)) {
          parsedSetCookieHeaderValues = setCookieHeaderValue;
        }
        outgoingMessage.setHeader("Set-Cookie", [
          cookie.serialize(),
          ...parsedSetCookieHeaderValues
        ]);
      }
    };
    return requestContext;
  };
};
var express = () => {
  return ({ args }) => {
    const [req, res] = args;
    const requestContext = {
      request: {
        method: req.method,
        headers: createHeadersFromObject(req.headers)
      },
      setCookie: (cookie) => {
        const cookieMaxAge = cookie.attributes.maxAge;
        res.cookie(cookie.name, cookie.value, {
          ...cookie.attributes,
          maxAge: cookieMaxAge ? cookieMaxAge * 1e3 : cookieMaxAge
        });
      }
    };
    return requestContext;
  };
};
var fastify = () => {
  return ({ args }) => {
    const [req, res] = args;
    const requestContext = {
      request: {
        method: req.method,
        headers: createHeadersFromObject(req.headers)
      },
      setCookie: (cookie) => {
        res.header("Set-Cookie", [cookie.serialize()]);
      }
    };
    return requestContext;
  };
};
var sveltekit = () => {
  return ({ args, sessionCookieName }) => {
    const [event] = args;
    const requestContext = {
      request: event.request,
      sessionCookie: event.cookies.get(sessionCookieName) ?? null,
      setCookie: (cookie) => {
        event.cookies.set(cookie.name, cookie.value, {
          path: ".",
          ...cookie.attributes
        });
      }
    };
    return requestContext;
  };
};
var astro = () => {
  return ({ args, sessionCookieName }) => {
    var _a;
    const [context] = args;
    const requestContext = {
      request: context.request,
      sessionCookie: ((_a = context.cookies.get(sessionCookieName)) == null ? void 0 : _a.value) || null,
      setCookie: (cookie) => {
        context.cookies.set(cookie.name, cookie.value, cookie.attributes);
      }
    };
    return requestContext;
  };
};
var qwik = () => {
  return ({ args, sessionCookieName }) => {
    var _a;
    const [event] = args;
    const requestContext = {
      request: event.request,
      sessionCookie: ((_a = event.cookie.get(sessionCookieName)) == null ? void 0 : _a.value) ?? null,
      setCookie: (cookie) => {
        event.cookie.set(cookie.name, cookie.value, cookie.attributes);
      }
    };
    return requestContext;
  };
};
var elysia = () => {
  return ({ args }) => {
    const [{ request, set }] = args;
    return {
      request,
      setCookie: (cookie) => {
        const setCookieHeader = set.headers["Set-Cookie"] ?? [];
        const setCookieHeaders = Array.isArray(setCookieHeader) ? setCookieHeader : [setCookieHeader];
        setCookieHeaders.push(cookie.serialize());
        set.headers["Set-Cookie"] = setCookieHeaders;
      }
    };
  };
};
var lucia = () => {
  return ({ args }) => args[0];
};
var web = () => {
  return ({ args }) => {
    const [request] = args;
    const requestContext = {
      request,
      setCookie: () => {
        throw new Error("Cookies cannot be set when using the `web()` middleware");
      }
    };
    return requestContext;
  };
};
var nextjs = () => {
  return ({ args, sessionCookieName, env }) => {
    var _a;
    const [serverContext] = args;
    if ("cookies" in serverContext) {
      const request2 = typeof serverContext.cookies === "function" ? serverContext.request : serverContext;
      const readonlyCookieStore = typeof serverContext.cookies === "function" ? serverContext.cookies() : serverContext.cookies;
      const sessionCookie = ((_a = readonlyCookieStore.get(sessionCookieName)) == null ? void 0 : _a.value) ?? null;
      const requestContext = {
        request: request2 ?? {
          method: "GET",
          headers: new Headers()
        },
        sessionCookie,
        setCookie: (cookie) => {
          if (typeof serverContext.cookies !== "function")
            return;
          const cookieStore = serverContext.cookies();
          if (!cookieStore.set)
            return;
          try {
            cookieStore.set(cookie.name, cookie.value, cookie.attributes);
          } catch {
          }
        }
      };
      return requestContext;
    }
    const req = "req" in serverContext ? serverContext.req : serverContext;
    const res = "res" in serverContext ? serverContext.res : null;
    const request = {
      method: req.method ?? "",
      headers: createHeadersFromObject(req.headers)
    };
    return {
      request,
      setCookie: (cookie) => {
        var _a2;
        if (!res)
          return;
        const setCookieHeaderValues = ((_a2 = res.getHeader("Set-Cookie")) == null ? void 0 : _a2.toString().split(",").filter((val) => val)) ?? [];
        res.setHeader("Set-Cookie", [
          cookie.serialize(),
          ...setCookieHeaderValues
        ]);
      }
    };
  };
};
var nextjs_future = () => {
  return ({ args, sessionCookieName }) => {
    var _a, _b;
    if (args.length === 2) {
      const [requestMethod, context] = args;
      return {
        request: {
          method: requestMethod,
          headers: context.headers()
        },
        setCookie: (cookie) => {
          try {
            context.cookies().set(cookie.name, cookie.value, cookie.attributes);
          } catch {
          }
        },
        sessionCookie: ((_a = context.cookies().get(sessionCookieName)) == null ? void 0 : _a.value) ?? null
      };
    }
    if ("req" in args[0]) {
      const [{ req, res }] = args;
      return {
        request: {
          method: req.method ?? "",
          headers: createHeadersFromObject(req.headers)
        },
        setCookie: (cookie) => {
          var _a2;
          if (!res)
            return;
          const setCookieHeaderValues = ((_a2 = res.getHeader("Set-Cookie")) == null ? void 0 : _a2.toString().split(",").filter((val) => val)) ?? [];
          res.setHeader("Set-Cookie", [
            cookie.serialize(),
            ...setCookieHeaderValues
          ]);
        }
      };
    }
    const [request] = args;
    return {
      request,
      setCookie: () => {
        throw new Error("Cookies cannot be set when using the `web()` middleware");
      },
      sessionCookie: ((_b = request.cookies.get(sessionCookieName)) == null ? void 0 : _b.value) ?? null
    };
  };
};
var h3 = () => {
  const nodeMiddleware = node();
  return ({ args, sessionCookieName, env }) => {
    const [context] = args;
    return nodeMiddleware({
      args: [context.node.req, context.node.res],
      sessionCookieName,
      env
    });
  };
};
var hono = () => {
  return ({ args }) => {
    const [context] = args;
    return {
      request: context.req,
      setCookie: (cookie) => {
        context.header("Set-Cookie", cookie.serialize());
      }
    };
  };
};

export {
  createHeadersFromObject,
  node,
  express,
  fastify,
  sveltekit,
  astro,
  qwik,
  elysia,
  lucia,
  web,
  nextjs,
  nextjs_future,
  h3,
  hono
};
//# sourceMappingURL=chunk-X3JKCRO4.js.map
