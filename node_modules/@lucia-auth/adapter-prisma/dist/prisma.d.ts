import type { Adapter, InitializeAdapter, SessionSchema } from "lucia";
type ExtractModelNames<_PrismaClient extends PrismaClient> = Exclude<keyof _PrismaClient, `$${string}`>;
export declare const prismaAdapter: <_PrismaClient extends PrismaClient>(client: _PrismaClient, modelNames?: {
    user: Exclude<keyof _PrismaClient, `$${string}`>;
    session: Exclude<keyof _PrismaClient, `$${string}`> | null;
    key: Exclude<keyof _PrismaClient, `$${string}`>;
} | undefined) => InitializeAdapter<Adapter>;
export declare const transformPrismaSession: (sessionData: PrismaSession) => SessionSchema;
type PrismaClient = {
    $transaction: (...args: any) => any;
} & {
    [K: string]: any;
};
export type PrismaSession = Omit<SessionSchema, "active_expires" | "idle_expires"> & {
    active_expires: BigInt | number;
    idle_expires: BigInt | number;
};
export type SmartPrismaModel<_Schema = any> = {
    findUnique: <_Included = {}>(options: {
        where: Partial<_Schema>;
        include?: Partial<Record<string, boolean>>;
    }) => Promise<null | _Schema> & _Included;
    findMany: (options?: {
        where: Partial<_Schema>;
    }) => Promise<_Schema[]>;
    create: (options: {
        data: _Schema;
    }) => Promise<_Schema>;
    delete: (options: {
        where: Partial<_Schema>;
    }) => Promise<void>;
    deleteMany: (options?: {
        where: Partial<_Schema>;
    }) => Promise<void>;
    update: (options: {
        data: Partial<_Schema>;
        where: Partial<_Schema>;
    }) => Promise<_Schema>;
};
export {};
